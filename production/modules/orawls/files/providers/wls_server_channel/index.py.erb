
m = ls('/Servers',returnMap='true')

f = open_file("name;server;protocol;enabled;listenport;httpenabled;outboundenabled;tunnelingenabled;listenaddress;publicport;max_message_size;publicaddress;domain;two_way_ssl;client_certificate_enforced;custom_identity_alias;channel_identity_customized", tmp_script)
for token in m:
        print '___'+token+'___'
        cd('/Servers/'+token)

        n = ls('/Servers/'+token+'/NetworkAccessPoints',returnMap='true')
        for token2 in n:
               cd('/Servers/'+token+'/NetworkAccessPoints/'+token2)
               protocol                    = get_attribute_value('Protocol')
               enabled                     = get_attribute_value('Enabled')
               listenaddress               = get_attribute_value('ListenAddress')
               publicaddress               = get_attribute_value('PublicAddress')
               listenport                  = get_attribute_value('ListenPort')
               publicport                  = get_attribute_value('PublicPort')
               max_message_size            = get_attribute_value('MaxMessageSize')

               httpenabled                 = get_attribute_value('HttpEnabledForThisProtocol')
               outboundenabled             = get_attribute_value('OutboundEnabled')
               tunnelingenabled            = get_attribute_value('TunnelingEnabled')
               two_way_ssl                 = get_attribute_value('TwoWaySSLEnabled')
               client_certificate_enforced = get_attribute_value('ClientCertificateEnforced')
               custom_identity_alias       = get_attribute_value('CustomPrivateKeyAlias')
               channel_identity_customized = get_attribute_value('ChannelIdentityCustomized')

               add_index_entry(f, [domain+'/'+token+":"+token2,token,protocol,enabled,listenport,httpenabled,outboundenabled,tunnelingenabled,listenaddress,publicport,max_message_size,publicaddress,domain,two_way_ssl,client_certificate_enforced,custom_identity_alias,channel_identity_customized])

f.close()
report_back_success()
